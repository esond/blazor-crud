@using eThorTest.Components
@using eThorTest.Data
@using eThorTest.Services
@inject IEntityRepository Repository
@page "/crud"

<h3>Entities</h3>

<div class="row">
    <EditForm Model="@_newEntity" OnValidSubmit="@CreateAsync">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="name">Name</label>
            <input id="name" class="form-control" type="text" autocomplete="off" @bind-value="@_newEntity.Name" />
        </div>

        <ValidationSummary />

        <div class="form-group">
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-plus" aria-hidden="true"></span>
            </button>
        </div>
    </EditForm>
</div>

<div class="row">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Properties</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in _entities)
            {
                <EntityRowComponent Entity="@entity"
                                    UpdateCallback="e => UpdateAsync(e)"
                                    DeleteCallback="id => DeleteAsync(id)" />
            }
        </tbody>
    </table>
</div>

@code {
    // TODO:  Validation

    private EThorTestEntity _newEntity = new EThorTestEntity();

    private IEnumerable<EThorTestEntity> _entities = new List<EThorTestEntity>();

    protected override Task OnInitializedAsync()
    {
        return RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        _newEntity = new EThorTestEntity();

        _entities = await Repository.GetAllAsync();
    }

    private async Task CreateAsync()
    {
        await Repository.CreateAsync(_newEntity);

        await RefreshAsync();
    }

    private async Task UpdateAsync(EThorTestEntity entity)
    {
        await Repository.UpdateAsync(entity);

        await RefreshAsync();
    }

    private async Task DeleteAsync(Guid id)
    {
        await Repository.DeleteAsync(id);

        await RefreshAsync();
    }
}
