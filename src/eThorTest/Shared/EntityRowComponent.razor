@inherits ComponentBase
@using eThorTest.Models

@if (_isEditing)
{
<tr>
    <td>@Model.Id</td>
    <td>
        <input id="name" class="form-control" type="text" autocomplete="off" @bind-value="@Model.Name" />
    </td>
    <td>
        <textarea id="properties" class="form-control" rows="3" autocomplete="off" @bind="@Model.PropertiesValue">
                  aria-describedby="propertiesHelp">
        </textarea>
        <small id="propertiesHelp" class="form-text text-muted">
            Properties are new-line delimited.
        </small>
    </td>
    <td>
        <EditForm Model="@Model" OnValidSubmit="@UpdateAsync">
            <DataAnnotationsValidator />
            <div class="form-group">
                <button class="btn btn-primary" type="submit">
                    <span class="oi oi-check" aria-hidden="true"></span>
                </button>
            </div>
            <ValidationSummary />
        </EditForm>
    </td>
</tr>
}
else
{
    <tr>
        <td>@Model.Id</td>
        <td>@Model.Name</td>
        <td>
            <ul>
                @foreach (var property in Model.Properties)
                {
                    <li>@property</li>
                }
            </ul>
        </td>
        <td>
            <button class="btn btn-secondary" type="button" @onclick="() => _isEditing = true">
                <span class="oi oi-pencil" aria-hidden="true"></span>
            </button>
            <button class="btn btn-danger" type="button" @onclick="@DeleteAsync">
                <span class="oi oi-trash" aria-hidden="true"></span>
            </button>
        </td>
    </tr>
}

@code {

    [Parameter]
    public EntityModel Model { get; set; }

    [Parameter]
    public EventCallback<EntityModel> UpdateCallback { get; set; }

    [Parameter]
    public EventCallback<Guid> DeleteCallback { get; set; }

    private bool _isEditing;

    private async Task UpdateAsync()
    {
        await UpdateCallback.InvokeAsync(Model);

        _isEditing = false;
    }

    private Task DeleteAsync()
    {
        return DeleteCallback.InvokeAsync(Model.Id);
    }
}
