@using eThorTest.Models
@using eThorTest.Services
@using eThorTest.Shared
@inject IEntityRepository Repository
@page "/"

<h1>Entities</h1>

<div class="row">
    <EditForm Model="@_newEntity" OnValidSubmit="@CreateAsync">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="name">Name</label>
            <input id="name" class="form-control" type="text" autocomplete="off" @bind-value="@_newEntity.Name" />
        </div>

        <div class="form-group">
            <label for="properties">Properties</label>
            <textarea id="properties" class="form-control" rows="3" autocomplete="off" aria-describedby="propertiesHelp" @bind="@_newEntity.PropertiesValue"></textarea>
            <small id="propertiesHelp" class="form-text text-muted">
                Properties are new-line delimited.
            </small>
        </div>

        <ValidationSummary />

        <div class="form-group">
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-plus" aria-hidden="true"></span> Add
            </button>
        </div>
    </EditForm>
</div>

<div class="row">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" class="col-3">Id</th>
                <th scope="col" class="col-3">Name</th>
                <th scope="col" class="col-4">Properties</th>
                <th scope="col" class="col-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in _models)
            {
                <EntityRowComponent Model="@model"
                                    UpdateCallback="e => UpdateAsync(e)"
                                    DeleteCallback="id => DeleteAsync(id)" />
            }
        </tbody>
    </table>
</div>

@code {
    private EntityModel _newEntity = new EntityModel();

    private IEnumerable<EntityModel> _models = new List<EntityModel>();

    protected override Task OnInitializedAsync()
    {
        return RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        _newEntity = new EntityModel();

        _models = (await Repository.GetAllAsync()).Select(e => new EntityModel(e));
    }

    private async Task CreateAsync()
    {
        await Repository.CreateAsync(_newEntity.GetEntity());

        await RefreshAsync();
    }

    private async Task UpdateAsync(EntityModel model)
    {
        await Repository.UpdateAsync(model.GetEntity());

        await RefreshAsync();
    }

    private async Task DeleteAsync(Guid id)
    {
        await Repository.DeleteAsync(id);

        await RefreshAsync();
    }
}
